const express = require('express');
const bodyParser = require('body-parser');
const axios = require('axios');

const app = express();
app.use(bodyParser.json());

// =======================================
// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£
// =======================================
const LINE_TOKEN = 'dH8P1oh9GQBtH0IJ3JBKcNe4aPzPRgTfmtjI3t2WDhe5uerlWcSCY4kyTSZYXtdr1XXqTLDKVxQmKuNbKnjQKZmzxP9LOMy+c92kMn+qvCVb9gANwsxzTAP9mrs1cmUAdDSCdDt44VID+WnImzqLKgdB04t89/1O/w1cDnyilFU='; // <<< ‡πÉ‡∏™‡πà Token ‡∏Ç‡∏≠‡∏á‡∏ö‡∏≠‡∏ó LINE
const ESP32_IP = '192.168.1.xxx'; // <<< ‡πÉ‡∏™‡πà IP ‡∏Ç‡∏≠‡∏á ESP32
const ESP32_PORT = 80;

// =======================================
// Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ server
// =======================================
app.get('/', (req, res) => {
  res.send('Server is running ‚úÖ');
});

// =======================================
// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö LINE
// =======================================
async function replyMessage(replyToken, text) {
  const headers = {
    'Content-Type': 'application/json',
    'Authorization': `Bearer ${LINE_TOKEN}`,
  };

  const body = {
    replyToken: replyToken,
    messages: [{ type: 'text', text }],
  };

  try {
    await axios.post('https://api.line.me/v2/bot/message/reply', body, { headers });
    console.log('üí¨ Replied to LINE:', text);
  } catch (err) {
    console.error('‚ùå Error replying to LINE:', err.response?.data || err.message);
  }
}

// =======================================
// Route webhook ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE
// =======================================
app.post('/webhook', async (req, res) => {
  console.log('üì© LINE webhook received:', req.body);

  try {
    const events = req.body.events;
    if (!events) return res.sendStatus(200);

    for (let event of events) {
      if (event.type === 'message' && event.message.type === 'text') {
        const text = event.message.text.toLowerCase();
        let replyText = '';
        let cmd = null;

        if (text === 'open' || text === 'unlock') {
          cmd = 'OPEN';
          replyText = 'üîì ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏Å...';
        } else if (text === 'close' || text === 'lock') {
          cmd = 'CLOSE';
          replyText = 'üîí ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î‡∏•‡πá‡∏≠‡∏Å...';
        } else if (text === 'status') {
          replyText = 'üì° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞...';
          await replyMessage(event.replyToken, replyText);

          try {
            const response = await axios.get(`http://${ESP32_IP}:${ESP32_PORT}/status`);
            const status = response.data; // ‡∏™‡∏°‡∏°‡∏ï‡∏¥ ESP32 ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô "LOCKED" ‡∏´‡∏£‡∏∑‡∏≠ "UNLOCKED"
            let msg = '‚öôÔ∏è ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ';
            if (status.includes('LOCKED')) msg += 'üîí ‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà';
            else if (status.includes('UNLOCKED')) msg += 'üîì ‡∏õ‡∏•‡∏î‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà';
            else msg += status;

            // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö LINE
            await replyMessage(event.replyToken, msg);
          } catch (err) {
            await replyMessage(event.replyToken, '‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ESP32 ‡πÑ‡∏î‡πâ');
            console.error('Error getting status:', err.message);
          }

          // ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ event ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          continue;
        } else {
          replyText = '‚ùî ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‚Äî ‡∏û‡∏¥‡∏°‡∏û‡πå open / close / status';
        }

        // ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÉ‡∏ô LINE
        await replyMessage(event.replyToken, replyText);

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ ESP32 ‡∏Å‡πá‡∏™‡πà‡∏á‡πÑ‡∏õ
        if (cmd) {
          try {
            await axios.get(`http://${ESP32_IP}:${ESP32_PORT}/?cmd=${cmd}`);
            console.log(`‚úÖ Sent command ${cmd} to ESP32`);
          } catch (err) {
            console.error('‚ùå Error sending command to ESP32:', err.message);
          }
        }
      }
    }

    res.sendStatus(200);
  } catch (err) {
    console.error(err);
    res.sendStatus(500);
  }
});

// =======================================
// Start server
// =======================================
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
});
